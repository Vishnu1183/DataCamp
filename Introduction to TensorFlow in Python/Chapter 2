########################        Linear Regression in TensorFlow  #######################

##### Setting the data type
price = np.array(housing['price'], np.float32)

##### Load data using pandas
# Import pandas under the alias pd
import pandas as pd

# Assign the path to a string variable named data_path
data_path = 'kc_house_data.csv'

# Load the dataset as a dataframe named housing 
housing = pd.read_csv(data_path)

# Print the price column of housing
print(housing.price)

##### Bringing everything together
# Import numpy and tensorflow with their standard aliases
import numpy as np
import tensorflow as tf

# Use a numpy array to define price as a 32-bit float
price = np.array(housing['price'], np.float32)

# Define waterfront as a Boolean using cast
waterfront = tf.cast(housing['waterfront'], tf.bool)

# Print price and waterfront
print(price)
print(waterfront)

##### Loss functions in TensorFlow 1
# Import the keras module from tensorflow
from tensorflow import keras

# Compute the mean squared error loss
loss = keras.losses.mse(price,predictions)

# Print the mean squared error
print(loss.numpy())

##### Loss functions in TensorFlow 2
# Import the keras module from tensorflow
from tensorflow import keras

# Compute the mean absolute error loss
loss = keras.losses.mae(price, predictions)

# Print the mean squared error
print(loss.numpy())

##### Modifying the loss function
# Initialize a variable named scalar
scalar = Variable(1.0, float32)

# Define a loss function
def loss_function(scalar, feature, target):
	# Define the predicted values
	predictions = scalar*features
	# Return the MAE loss
	return keras.losses.mae(target, predictions)

# Evaluate and print the loss function
print(loss_function(scalar, features, target).numpy())

##### Setup a linear regression
# Define the intercept and slope
intercept = Variable(0.1, float32)
slope = Variable(0.1, float32)

# Set the loss function to take the variables as arguments
def loss_function(intercept , slope):
	# Set the predicted values
	pred_price_log = intercept + slope*lot_size_log
    # Return the MSE loss
	return keras.losses.mse(price_log,pred_price_log)

# Initialize an adam optimizer
opt = keras.optimizers.Adam(0.1)

##### Train a linear model
for j in range(500):
	# Apply minimize, pass the loss function, and supply the variables
    opt.minimize(lambda: loss_function(intercept, slope), var_list=[intercept, slope])
    if j % 100 == 0:
  	  print(loss_function(intercept, slope).numpy())

# Print the intercept and slope as numpy arrays
print(intercept.numpy(), slope.numpy())

##### Multiple linear regression
# Define variables for intercept, slope_1, and slope_2
intercept = Variable(0.1, float32)
slope_1 = Variable(0.1, float32)
slope_2 = Variable(0.1, float32)

# Define the loss function
def loss_function(intercept, slope_1, slope_2):
	# Use the mean absolute error loss
	return keras.losses.mae(price_log, intercept+lot_size_log*slope_1+bedrooms*slope_2)

# Define the optimize operation
opt = keras.optimizers.Adam()

# Perform one minimization step
opt.minimize(lambda: loss_function(intercept, slope_1, slope_2), var_list=[intercept, slope_1, slope_2])

##### Preparing to batch train
# Define the intercept and slope
intercept = Variable(10.0, float32)
slope = Variable(0.5, float32)

# Define the loss function
def loss_function(intercept, slope, features, target):
	# Define the predicted values
	predictions = intercept+features*slope
 	# Define the MSE loss
	return keras.losses.mse(target, predictions)
  
  ##### Training a linear model in batches
  # Initialize adam optimizer
opt = keras.optimizers.Adam()

# Load data in batches
for batch in pd.read_csv('kc_house_data.csv', chunksize=100):
	size_batch = np.array(batch['sqft_lot'], np.float32)
	# Extract the price values for the current batch
	price_batch = np.array(batch['price'], np.float32)
	# Complete the loss, fill in the variable list, and minimize
	opt.minimize(lambda: loss_function(intercept, slope, size_batch, price_batch), var_list=[intercept, slope])

# Print trained parameters
print(intercept.numpy(), slope.numpy())
